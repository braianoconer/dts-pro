version: '3.7'


volumes:
  prometheus_data: {}
  grafana_data: {}
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  logs_data:
    driver: local
  elastic_data:
    driver: local
  filebeat_data:
    driver: local


networks:
  observability:
    driver: "bridge"



services:

  zookeeper:
    image: bitnami/zookeeper:3
    container_name: zookeeper
    ports:
      - '2181:2181'
    volumes:
      - 'zookeeper_data:/bitnami'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - observability


  kafka:
    image: bitnami/kafka:2
    container_name: kafka
    ports:
      - '9092:9092'
      - '29092:29092'
    volumes:
      - 'kafka_data:/bitnami'
    environment:
      - KAFKA_CREATE_TOPICS="english:1:1,spanish:1:1,italian:1:1,german:1:1"
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:29092,PLAINTEXT_HOST://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
    depends_on:
      - zookeeper
    networks:
      - observability


  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - '9411:9411'
    environment:
      STORAGE_TYPE: mem
    networks:
      - observability


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.6.2
    container_name: elasticsearch
    ports:
      - '9200:9200'
    environment:
      - node.name=elasticsearch
      - cluster.name=es-docker-cluster
      - cluster.initial_master_nodes=elasticsearch
      - bootstrap.memory_lock=true
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elastic_data:/usr/share/elasticsearch/data:rw
      - ./elk/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    networks:
      - observability


  kibana:
    image: docker.elastic.co/kibana/kibana:7.6.2
    container_name: kibana
    ports:
      - '5601:5601'
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    restart: on-failure
    depends_on:
      - elasticsearch
    networks:
      - observability


  filebeat:
    image: docker.elastic.co/beats/filebeat:7.6.2
    container_name: filebeat
    user: root
    volumes:
      - ./elk/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      #- logs_data:/usr/share/filebeat/logs_data:ro
      - filebeat_data:/usr/share/filebeat/data:rw                        
    restart: on-failure
    depends_on:
      - elasticsearch
    networks:
      - observability


  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./metrics/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - observability


  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - '3000:3000'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./metrics/grafana:/etc/grafana/provisioning
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - observability


  translator:
    image: docker-registry.pro.com/pro/translator:latest
    container_name: translator
    ports:
      - '8085:8085'
    labels:
      collect_logs_with_filebeat: "true"
    volumes:
      - logs_data:/tmp/tmp
    environment:
      server.port: 8085
      spring.zipkin.baseUrl: ${ZIPKIN_HTTP_ENDPOINT_SHORT}
      service.api-success-rate: 90
    depends_on:
      - zipkin
    networks:
      - observability


  english-initiator:
    image: docker-registry.pro.com/pro/english-initiator:latest
    container_name: english-initiator
    ports:
      - '8091:8091'
    labels:
      collect_logs_with_filebeat: "true"
    volumes:
      - logs_data:/tmp/tmp
    environment:
      server.port: 8091
      spring.zipkin.baseUrl: ${ZIPKIN_HTTP_ENDPOINT_SHORT}
      spring.kafka.bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
      spring.kafka.producer.key-serializer: ${KAFKA_KEY_SERIALIZER}
      spring.kafka.producer.value-serializer: ${KAFKA_VALUE_SERIALIZER}
      service.kafka-out-topic: english
      service.kafka-out-topic-full: english:1:1
      service.delay-millis: 500
      service.spanish-processor-url: http://spanish-processor:8082
      service.italian-processor-url: http://italian-processor:8083
      service.german-processor-url: http://german-processor:8084
      logging.level.com.pro: TRACE
    depends_on:
      - kafka
      - zipkin
    networks:
      - observability


  spanish-processor:
    image: docker-registry.pro.com/pro/generic-processor:latest
    container_name: spanish-processor
    ports:
      - '8082:8082'
    labels:
      collect_logs_with_filebeat: "true"
    volumes:
      - logs_data:/tmp/tmp
    environment:
      spring.application.name: spanish-processor
      server.port: 8082
      spring.zipkin.baseUrl: ${ZIPKIN_HTTP_ENDPOINT_SHORT}
      spring.kafka.bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
      spring.kafka.producer.key-serializer: ${KAFKA_KEY_SERIALIZER}
      spring.kafka.producer.value-serializer: ${KAFKA_VALUE_SERIALIZER}
      spring.kafka.consumer.key-deserializer: ${KAFKA_KEY_DESERIALIZER}
      spring.kafka.producer.value-deserializer: ${KAFKA_VALUE_DESERIALIZER}
      spring.kafka.consumer.group-id: spanish
      service.kafka-in-topic: english
      service.kafka-out-topic: spanish
      service.kafka-in-topic-full: english:1:1
      service.kafka-out-topic-full: spanish:1:1
      service.delay-millis: 500
      service.translator-url: ${TRANSLATOR_URL}
      service.translator-target: ES
    depends_on:
      - kafka
      - zipkin
      - translator
    networks:
      - observability


  italian-processor:
    image: docker-registry.pro.com/pro/generic-processor:latest
    container_name: italian-processor
    ports:
      - '8083:8083'
    labels:
      collect_logs_with_filebeat: "true"
    volumes:
      - logs_data:/tmp/tmp
    environment:
      spring.application.name: italian-processor
      server.port: 8083
      spring.zipkin.baseUrl: ${ZIPKIN_HTTP_ENDPOINT_SHORT}
      spring.kafka.bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
      spring.kafka.producer.key-serializer: ${KAFKA_KEY_SERIALIZER}
      spring.kafka.producer.value-serializer: ${KAFKA_VALUE_SERIALIZER}
      spring.kafka.consumer.key-deserializer: ${KAFKA_KEY_DESERIALIZER}
      spring.kafka.producer.value-deserializer: ${KAFKA_VALUE_DESERIALIZER}
      spring.kafka.consumer.group-id: italian
      service.kafka-in-topic: spanish
      service.kafka-out-topic: italian
      service.kafka-in-topic-full: spanish:1:1
      service.kafka-out-topic-full: italian:1:1
      service.delay-millis: 3000
      service.translator-url: ${TRANSLATOR_URL}
      service.translator-target: IT
    depends_on:
      - kafka
      - zipkin
      - translator
    networks:
      - observability


  german-processor:
    image: docker-registry.pro.com/pro/generic-processor:latest
    container_name: german-processor
    ports:
      - '8084:8084'
    labels:
      collect_logs_with_filebeat: "true"
    volumes:
      - logs_data:/tmp/tmp
    environment:
      spring.application.name: german-processor
      server.port: 8084
      spring.zipkin.baseUrl: ${ZIPKIN_HTTP_ENDPOINT_SHORT}
      spring.kafka.bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
      spring.kafka.producer.key-serializer: ${KAFKA_KEY_SERIALIZER}
      spring.kafka.producer.value-serializer: ${KAFKA_VALUE_SERIALIZER}
      spring.kafka.consumer.key-deserializer: ${KAFKA_KEY_DESERIALIZER}
      spring.kafka.producer.value-deserializer: ${KAFKA_VALUE_DESERIALIZER}
      spring.kafka.consumer.group-id: german
      service.kafka-in-topic: italian
      service.kafka-out-topic: german
      service.kafka-in-topic-full: italian:1:1
      service.kafka-out-topic-full: german:1:1
      service.delay-millis: 6000
      service.translator-url: ${TRANSLATOR_URL}
      service.translator-target: DE
    depends_on:
      - kafka
      - zipkin
      - translator
    networks:
      - observability
